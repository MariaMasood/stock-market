shiny::runApp()
runApp('C:/Users/IT.Intern/Desktop')
library("shiny")
library("grDevices")
plotForecastResult(result.stl, title = "Passenger rate forecasting with STL")
p <- recordPlot()
function(input, output, session) {
datasetInput <- reactive({
switch(input$dataset,
"predicted" = predicted,
"actual" = actual,
"error" = calculated)
})
# Show the first "n" observations ----
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
output$plotPoints <- renderPlot({
replayPlot(p)
points(1:input$ile)
})
}
library(readr)
MyData <- read.csv("MyData.csv")
#View(MyData)
MyData <- unique(MyData)
MyData <- MyData[1:213,2:3]
MyData <- data.frame(MyData)
MyData=MyData[1:213,1:2]
MyData$Date <- as.Date(MyData$Date, "%m/%d/%Y")
range(MyData$Date)
str(MyData$Date)
MyData <- MyData[order(MyData$Date), ]
str(MyData$Date)
newData <- read.csv("newData.csv")
#View(newData)
newData <- unique(newData)
newData <- newData[1:7,]
newData <- data.frame(newData)
newData$Date <- as.Date(newData$Date, "%m/%d/%Y")
library(lubridate)
newData$Date <- lubridate::ymd(as.character(newData$Date))
range(newData$Date)
str(newData$Date)
newData <- newData[order(newData$Date), ]
str(newData$Date)
new=rbind(MyData,newData)
MyData=new
str(MyData$Date)
## plot time series
plot(MyData$Date, MyData$V1, type = "l")
head(MyData$Date, 20)
months <- format(MyData$Date, "%m")
tab <- table(months)
tab
mean(tab[1:(length(tab) - 1)])
source("forecast.R")  ## see code file in section 5
result.arima <- forecastArima(MyData, n.ahead = 30)
source("plotForecastResult.R")  ## see code file in section 5
plotForecastResult(result.arima, title = "Passenger rate forecasting with ARIMA")
result.stl <- forecastStl(MyData, n.ahead = 90)
plotForecastResult(result.stl, title = "Passenger rate forecasting with STL")
## Passenger arrival rate in 2019
resultarmia <- subset(result.arima, date >= "2018-10-01")
plotForecastResult(resultarmia, title = "Passenger rate forecasting with ARIMA (Jan to Mar 2019)")
write.csv(resultarmia, file = "ResultARMIA.csv",row.names=FALSE)
library(readr)
ResultARMIA <- read.csv("ResultARMIA.csv")
#View(ResultARMIA)
print(ResultARMIA[92:112,3:6])
## Passenger arrival rate in 2019
result <- subset(result.stl, date >= "2018-10-01")
plotForecastResult(result, title = "Passenger rate forecasting with STL (Jan to Mar 2019)")
class(result)
write.csv(result, file = "Result.csv",row.names=FALSE)
library(readr)
Result <- read.csv("Result.csv")
#View(Result)
round_df <- function(x, digits) {
# round all numeric variables
# x: data frame
# digits: number of digits to round
numeric_columns <- sapply(x, mode) == 'numeric'
x[numeric_columns] <-  round(x[numeric_columns], digits)
x
}
a=result[90:173,3:6]
a[,1:3]=round_df(a[,1:3], 0)
a=a[,1:4]
#View(a)
write.csv(a, file = "predicted.csv",row.names=FALSE)
predicted <- read.csv("predicted.csv")
#View(predicted)
pred=predicted[1:4,1]
date=predicted[1:4,4]
newData <- read.csv("newData.csv")
#View(newData)
observed= newData[8:11,2]
#difference per occurence
error=observed-pred
#Forecast Error #absolute error
absolute=abs(error)
FE=absolute/observed
#Forecast Accuracy
FE = FE *100
one =1
FError=absolute/observed
FAccuracy = one-FError
FAccuracy = (one-FError) *100
#Mean Absolute Error(MAE)& Mean Absolute Deviation MAD
MAD=sum(absolute)/length(absolute)
#MFE
MFE=sum(observed-pred)/length(observed)
#percentage error
percenterror=((absolute)/observed)*100
#absolute percentage error
abspererror=abs(percenterror)
#absolute percentage difference
abspercdiff=sum(abspererror)/length(abspererror)
#Mean absolute percentage Error
MAPE=(sum(abspercdiff)/sum(observed))*100
calculated <- data.frame(FE, FAccuracy, date)
colnames(calculated)[1] <- "Forecast Error"
colnames(calculated)[2] <- "Forecast Accuracy"
#Standard Deviation
std <- function(x) sd(x)/sqrt(length(x))
std(error)
sem<-sd(pred)/sqrt(length(pred))
c(mean(pred)-2*sem,mean(pred)+2*sem)
RMSE=sqrt( mean( (pred-observed)^2) ) / ( max(observed)-min(observed) )
library(lubridate)
newData$Date <- as.Date(newData$Date, "%m/%d/%Y")
newData$Date <- lubridate::ymd(as.character(newData$Date))
actual=newData[1:11,c(1,2)]
write.csv(actual, file = "actual.csv",row.names=FALSE)
actual <- read.csv("actual.csv")
library(readr)
MyData <- read.csv("MyData.csv")
#View(MyData)
MyData <- unique(MyData)
MyData <- MyData[1:213,2:3]
MyData <- data.frame(MyData)
MyData=MyData[1:213,1:2]
MyData$Date <- as.Date(MyData$Date, "%m/%d/%Y")
range(MyData$Date)
str(MyData$Date)
MyData <- MyData[order(MyData$Date), ]
str(MyData$Date)
newData <- read.csv("newData.csv")
#View(newData)
newData <- unique(newData)
newData <- newData[1:7,]
newData <- data.frame(newData)
newData$Date <- as.Date(newData$Date, "%m/%d/%Y")
library(lubridate)
newData$Date <- lubridate::ymd(as.character(newData$Date))
range(newData$Date)
str(newData$Date)
newData <- newData[order(newData$Date), ]
str(newData$Date)
new=rbind(MyData,newData)
MyData=new
str(MyData$Date)
## plot time series
plot(MyData$Date, MyData$V1, type = "l")
head(MyData$Date, 20)
months <- format(MyData$Date, "%m")
tab <- table(months)
tab
mean(tab[1:(length(tab) - 1)])
source("forecast.R")  ## see code file in section 5
result.arima <- forecastArima(MyData, n.ahead = 30)
source("plotForecastResult.R")  ## see code file in section 5
plotForecastResult(result.arima, title = "Passenger rate forecasting with ARIMA")
result.stl <- forecastStl(MyData, n.ahead = 90)
plotForecastResult(result.stl, title = "Passenger rate forecasting with STL")
## Passenger arrival rate in 2019
resultarmia <- subset(result.arima, date >= "2018-10-01")
plotForecastResult(resultarmia, title = "Passenger rate forecasting with ARIMA (Jan to Mar 2019)")
write.csv(resultarmia, file = "ResultARMIA.csv",row.names=FALSE)
library(readr)
ResultARMIA <- read.csv("ResultARMIA.csv")
#View(ResultARMIA)
print(ResultARMIA[92:112,3:6])
## Passenger arrival rate in 2019
result <- subset(result.stl, date >= "2018-10-01")
plotForecastResult(result, title = "Passenger rate forecasting with STL (Jan to Mar 2019)")
class(result)
write.csv(result, file = "Result.csv",row.names=FALSE)
library(readr)
Result <- read.csv("Result.csv")
#View(Result)
round_df <- function(x, digits) {
# round all numeric variables
# x: data frame
# digits: number of digits to round
numeric_columns <- sapply(x, mode) == 'numeric'
x[numeric_columns] <-  round(x[numeric_columns], digits)
x
}
a=result[90:173,3:6]
a[,1:3]=round_df(a[,1:3], 0)
a=a[,1:4]
#View(a)
write.csv(a, file = "predicted.csv",row.names=FALSE)
predicted <- read.csv("predicted.csv")
#View(predicted)
pred=predicted[1:4,1]
date=predicted[1:4,4]
newData <- read.csv("newData.csv")
#View(newData)
observed= newData[8:11,2]
#difference per occurence
error=observed-pred
#Forecast Error #absolute error
absolute=abs(error)
FE=absolute/observed
#Forecast Accuracy
FE = FE *100
one =1
FError=absolute/observed
FAccuracy = one-FError
FAccuracy = (one-FError) *100
#Mean Absolute Error(MAE)& Mean Absolute Deviation MAD
MAD=sum(absolute)/length(absolute)
#MFE
MFE=sum(observed-pred)/length(observed)
#percentage error
percenterror=((absolute)/observed)*100
#absolute percentage error
abspererror=abs(percenterror)
#absolute percentage difference
abspercdiff=sum(abspererror)/length(abspererror)
#Mean absolute percentage Error
MAPE=(sum(abspercdiff)/sum(observed))*100
calculated <- data.frame(FE, FAccuracy, date)
colnames(calculated)[1] <- "Forecast Error"
colnames(calculated)[2] <- "Forecast Accuracy"
#Standard Deviation
std <- function(x) sd(x)/sqrt(length(x))
std(error)
sem<-sd(pred)/sqrt(length(pred))
c(mean(pred)-2*sem,mean(pred)+2*sem)
RMSE=sqrt( mean( (pred-observed)^2) ) / ( max(observed)-min(observed) )
library(lubridate)
newData$Date <- as.Date(newData$Date, "%m/%d/%Y")
newData$Date <- lubridate::ymd(as.character(newData$Date))
actual=newData[1:11,c(1,2)]
write.csv(actual, file = "actual.csv",row.names=FALSE)
actual <- read.csv("actual.csv")
library(readr)
MyData <- read.csv("MyData.csv")
#View(MyData)
library(shiny)
fluidPage(
titlePanel("Forecasting Passenger Arrival"),
sidebarPanel(
selectInput(inputId = "dataset",
label = "Choose a dataset:",
choices = c("predicted", "actual", "error")),
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "obs",
label = "Number of observations to view:",
value = 5),
sliderInput("ile", min=1, max=10, label="", value=5)
),
mainPanel(
# Output: Verbatim text for data summary ----
verbatimTextOutput("summary"),
# Output: HTML table with requested number of observations ----
tableOutput("view"),
plotOutput("plotPoints"))
)
library("shiny")
library("grDevices")
plotForecastResult(result.stl, title = "Passenger rate forecasting with STL")
p <- recordPlot()
function(input, output, session) {
datasetInput <- reactive({
switch(input$dataset,
"predicted" = predicted,
"actual" = actual,
"error" = calculated)
})
# Show the first "n" observations ----
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
output$plotPoints <- renderPlot({
replayPlot(p)
points(1:input$ile)
})
}
library(readr)
MyData <- read.csv("MyData.csv")
